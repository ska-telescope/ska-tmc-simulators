# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  CHARTS_TO_PUBLISH: ska-tmc-simulators

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

#before_script:
#  - python3 -m pip install -r requirements-dev.txt
#  - python3 -m pip install pipdeptree

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - test
  - deploy
  - publish
  - pages


# Standardised included jobs
include:
  # Helm Chart Publish
  # https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm_publish.yml'

  # Create Gitlab CI badges from CI metrics
  # https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'

  # # OCI image lint
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image-lint.gitlab-ci.yml'

  # # OCI image build
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image-build.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-build.gitlab-ci.yml'

  # # OCI image publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image-publish.gitlab-ci.yml'

  # Lint stage
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

  # Publish stage
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-publish.gitlab-ci.yml'

  # Deploy stage
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Test stage
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s-test.gitlab-ci.yml'


k8s-test:
  # allow_failure: true
  stage: test
  script:
    - echo "No test runs necessary. Job Succeeded."
  rules:
    - exists:
        - src/**/*

