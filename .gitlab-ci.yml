# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  CHARTS_TO_PUBLISH: ska-tmc-simulators

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

#before_script:
#  - python3 -m pip install -r requirements-dev.txt
#  - python3 -m pip install pipdeptree

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - clean
  - deploy
  - lint
  - release
  - publish
  - pages

build-image:
  stage: build
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  tags:
    - k8srunner
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker build --pull --tag "$IMG" .
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker push "$IMG"
  artifacts:
    paths:
      - current_tag.txt

python-build-for-development: # Executed on non-tagged commit
  allow_failure: true
  stage: build
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  tags:
    - k8srunner
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-build'
  script:
    - make python-build PYTHON_BUILD_TYPE="non_tag_pyproject"
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - exists:
        - pyproject.toml
  artifacts:
    paths:
      - ./dist/

deploy-simulators:
  stage: deploy
  dependencies:
    - build-image
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  before_script:
    - kubectl get namespace
    - make clean
  script:
    - kubectl version
    - make install-chart MINIKUBE=false
    - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/master/scripts/namespace_auth.sh | bash -s "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG" "ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid" || true
    - make wait
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid
  when: manual

tmc-simulators_uninstall:
  stage: clean
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  before_script:
    - kubectl get namespace
  script:
    - make uninstall-chart
    - make clean
    - make delete_namespace
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid
    action: stop
  when: manual

publish to nexus:
  stage: publish
  tags:
    - docker-executor
  script:
    - python3 -m pip install twine
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-simulators/dist/*
  when: manual
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ # Confirm semantic versioning of tag

pages:
  stage: pages
  tags:
    - docker-executor
  only:
    - master
  script:
    - mv build public
    - mv public/reports/ska-tmc-simulators_htmlcov/* public
  artifacts:
    paths:
      - public

release simulators:
  stage: release
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  before_script:
  - docker login -u $CAR_OCI_REGISTRY_USERNAME -p $CAR_OCI_REGISTRY_PASSWORD $CAR_OCI_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - make release-ska-tmc-simulators USERNAME=$GITLAB_USER_NAME EMAILID=$GITLAB_USER_EMAIL # Publish tag on the gitlab and tagged image on Nexus
  when: manual

# Standardised included jobs
include:
# Helm Chart Publish
# https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm_publish.yml'
# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/post_step.yml'

- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'
